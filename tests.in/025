# Scott Numerals

rule: S 1 2 3 -> 1 3 (2 3)
rule: K 1 2 -> 1
rule: I 1  -> 1
rule: Lark 1 2  -> 1 (2 2)
rule: Turing 1 2 -> 2 (1 1 2)

(reduce S a b c) = (a c (b c))
(reduce K a b) = a
(reduce I a) = a
(reduce Lark a b) = a (b b)

abstraction: [_] *- -> K 1
abstraction: [_] _ -> I
abstraction: [_] *- _ -> 1
abstraction: [_] * * -> S ([_]1) ([_]2)

# Scott Numerals as per March 8, 2006 revision of John Tromp's 
# paper, "Binary Lambda Calculus and Combinatory Logic".
# "The Scott Numerals [i] can be used to define arithmetic, as
# well as for indexing lists; M [i] select's the i'th element
# of a sequence M."

#define zero %a.%b.a
def zero [a][b] a
#define succ %c.%d.%e.(e c)
define succ [c][d][e] e c
#define case %f.%g.%h.f g h
define case [p][q][r]p q r
#define pred %i.(i (%j.%k.j) (%l.l))
define pred [i] (i ([j][k]j) ([l]l))

def True ([x][y] x)
def False ([x][y] y)

def nil False
def sn0 True
def sn1 (reduce succ sn0)
def sn2 (reduce succ sn1)
def sn3 (reduce succ sn2)
def sn4 (reduce succ sn3)
def sn5 (reduce succ sn4)
def sn6 (reduce succ sn5)

# check pairing operator
define pair ([p][q][z] z p q)
(pair true false) True
(pair true false) False

# define a list, check that each incrementally composed Scott numeral works
def list (reduce (pair _zero (pair _one (pair _two (pair _three (pair _four (pair _five (pair _six nil))))))))

check_incremental_scott_numerals
list sn0
list sn1
list sn2
list sn3
list sn4
list sn5
list sn6

# S L L - from "To Mock a Mockingbird"
def Y S Lark Lark
define R ([o][n][m]( case m n (o (succ n)) ))
define add (Y R)

check_added_scott_numerals
list (add sn0 sn0)
list (add sn0 sn1)
list (add sn1 sn0)
list (add sn1 sn1)
list (add sn2 sn1)
list (add sn1 sn2)
list (add sn2 sn2)
list (add sn2 sn3)
list (add sn3 sn3)
list (add (add sn2 sn1) (add sn1 sn2))

def Y Turing Turing
define add (Y R)

check_added_scott_numerals_2
list (add sn0 sn0)
list (add sn0 sn1)
list (add sn1 sn0)
list (add sn1 sn1)
list (add sn2 sn1)
list (add sn1 sn2)
list (add sn2 sn2)
list (add sn2 sn3)
list (add sn3 sn3)
list (add (add sn2 sn1) (add sn1 sn2))
list (add (add sn1 sn1) (add (add sn1 sn1) (add sn1 sn1)))

# Klop's huge fp combinator
def L [a] [b] [c] [d] [e] [f] [gg] [h] [i] [j] [k] [l] [m] [n] [o] [p] [q] [s] [t] [u] [v] [w] [x] [y] [z] [r] (r (t h i s i s a f i x e d p o i n t c o m b i n a t o r))
def YK (L L L L L L L L L L L L L L L L L L L L L L L L L L)
define add (YK R)
check_added_scott_numerals_3
#(reduce list (add sn0 sn0)) = _zero
(reduce list (add sn0 sn1)) = _one
#(reduce list (add sn1 sn0)) = _one
#(reduce list (add sn1 sn1)) = _two
#(reduce list (add sn2 sn1)) = _three
#(reduce list (add sn1 sn2)) = _three
#(reduce list (add sn2 sn2)) = _four
#(reduce list (add sn2 sn3)) = _five
#(reduce list (add sn3 sn3)) = _six
#(reduce list (add (add sn2 sn1) (add sn1 sn2))) = _six
#(reduce list (add (add sn1 sn1) (add (add sn1 sn1) (add sn1 sn1)))) = _six
